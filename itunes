#!/bin/bash
#
#  A simple command-line wrapper for Apple's iTunes.
#
#  Install or symlink into your path and "itunes -h" or "itunes help" for help.
#
#  Copyright 2012 Sam Graham.  http://www.illusori.co.uk/
#  This work is licensed under a
#  Creative Commons Attribution-Share Alike 2.0 UK: England & Wales License
#  http://creativecommons.org/licenses/by-sa/2.0/uk/
#  In human-readble terms: you're free to copy, distribute and modify
#  providing you maintain attribution and licence.
#
#  Use at your own risk, no fitness for purpose implied, etc, etc.

version='1.0.4'
progname=`basename $0`

#  Version and help.

function _cmd_version() {
    echo "$progname version $version"
}

function _cmd_help() {
    _cmd_version
    echo "Usage: $progname [-v] [-h] [-d] <command> [<args>]

Switches:
    -v          Show version information and exit.
    -h          Show this help and exit.
    -d          Enable debug messages, additional -d options increase verbosity.

Navigation commands:
    play        Start or resume playing.
    pause       Pause playing.
    stop        Stop playing.
    next        Skip to next track.
    prev        Skip back to previous track.
    info        View info about current track.
    shuffle     View or set shuffle status.
    repeat      View or set repeat status.
    playlist    View or choose playlist.
    playlists   List all playlists.

Volume commands:
    vol[ume]    View or adjust iTunes volume 'up', 'down' or percentage.
    mute        Mutes iTunes.
    unmute      Unmutes iTunes, restoring previous volume level.
    sysvol[ume] View or adjust system volume 'up', 'down' or percentage.
    sysmute     Mute system sound.
    sysunmute   Unmute system sound.

Application commands:
    open        Start iTunes running.
    quit        Quit iTunes.
    show        Hide the iTunes window.
    hide        Show the iTunes window.

Additional commands:
    version     Show version information and exit.
    help        Show this help and exit."
}

function _cmd_unknown() {
    echo "Unknown command '$cmd', try '$progname help' for a list of valid commands."
}

#  Helper functions

function _err() {
    echo "$*" 1>&2
}

function _log() {
    if [ "$debug" -ge "$1" ]; then
        shift;
        _err "$*"
    fi
}

function _osascript() {
    _log 3 "Run: osascript -e \"$*\""
    if [ "$debug" -gt 0 ]; then
        osascript -e "$*"
    else
        osascript -e "$*" 2>&-
    fi
}

function _tell_itunes() {
    _osascript "tell application \"iTunes\" to $*"
}

#  Fetch from iTunes from the data-structures in $1 into the array
#  variables constructed from prefix $2 and column names $3+ the
#  given columns in the data-structure.
#  If that's clear.
#  No?
#  Anyone?
function _fetch_from_itunes() {
    local structure="$1"
    local prefix="$2"
    shift 2
    local columns="$*"
    local script_columns="${columns// /, }"

    _log 4 "structure '$structure'"
    _log 4 "prefix '$prefix'"
    _log 4 "columns '$columns'"
    _log 4 "script_columns '$script_columns'"

    local result=$(_osascript "tell application \"iTunes\" to set ret to ($script_columns) of $structure
set old_delim to AppleScript's text item delimiters
set AppleScript's text item delimiters to \"\\n\"
set ret to ret as text
set AppleScript's text item delimiters to old_delim
ret")
    _log 4 "result '$result'"

    _read_rows_from_value_lines_grouped_by_column "$prefix" "$result" $columns
}

function _read_rows_from_value_lines_grouped_by_column() {
    local prefix="$1"
    local content="$2"
    shift 2
    local columns
    read -r -a columns <<< "$*"

    local row_count=$(($(wc -l <<< "$content") / ${#columns[*]}))

    for column in "${columns[@]}"; do
        unset "${prefix}_${column}"
    done

    local row_idx=0
    local column_idx=0
    local value
    while read value; do
        column=${columns[column_idx]}
        #  Ho hum, I gave up and used eval, couldn't get this working with $(())
        eval "${prefix}_${column}[${row_idx}]='$value'"

        row_idx=$((row_idx + 1))
        if [ "$row_idx" -ge "$row_count" ]; then
            row_idx=0
            column_idx=$((column_idx + 1))
        fi
    done <<< "$content"
}

function _show_info() {
    local prefix="$1"
    local showrating="$2"

    _fetch_from_itunes "current track" track name artist album year rating time
    _log 3 "Fetched track '$track_name', artist '$track_artist', album '$track_album', year '$track_year', rating '$track_rating', time '$track_time'"
    local track_pos=$(_tell_itunes "player position as integer")
    local track_min=$((track_pos / 60))
    local track_sec=$(printf "%02d" $((track_pos % 60)))
    track_pos="${track_min}:${track_sec}"
    _log 3 "Fetched trackpos '$track_pos', ${track_min}:${track_sec}"
    echo -n "$prefix \"$track_name\""
    if [ -n "$track_artist" ]; then
        echo -n " by $track_artist"
    fi
    if [ -n "$track_album" ]; then
        echo -n ", from \"$track_album\""
        if [ -n "$track_year" -a "$track_year" != 0 ]; then
            echo -n " ($track_year)"
        fi
    fi
    echo " ($track_pos of $track_time)"
    if [ "$showrating" = 1 -a -n "$track_rating" -a "$track_rating" != 0 ]; then
        echo "You've rated this track $track_rating."
    fi
}

#  Navigation commands: play, pause, stop, next, prev, playlist

function _cmd_play() {
    _tell_itunes "play"
    _show_info "Resuming" 0
}

function _cmd_pause() {
    echo "Pausing iTunes."
    _tell_itunes "pause"
}

function _cmd_stop() {
    echo "Stopping iTunes."
    _tell_itunes "stop"
}

function _cmd_next() {
    _tell_itunes "next track"
    _show_info "Skipping to next track," 0
}

function _cmd_prev() {
    _tell_itunes "previous track"
    _show_info "Skipping to previous track," 0
}

function _cmd_info() {
    _show_info "Currently playing" 1
}

function _cmd_shuffle() {
    if [ -z "$1" ]; then
        curshuffle=$(_tell_itunes "shuffle of current playlist")
        _log 3 "Fetched shuffle is '$curshuffle'"
        if [ "$curshuffle" = "true" ]; then
            echo "Current shuffle setting is on."
        else
            echo "Current shuffle setting is off."
        fi
    else
        case "$1" in
            "on")
                echo "Switching shuffle on."
                _tell_itunes "set shuffle of current playlist to true"
                ;;
            "off")
                echo "Switching shuffle off."
                _tell_itunes "set shuffle of current playlist to false"
                ;;
            *)
                _err "Shuffle must be one of 'on' or 'off'."
                ;;
        esac
    fi
}

function _cmd_repeat() {
    if [ -z "$1" ]; then
        currepeat=$(_tell_itunes "song repeat of current playlist")
        _log 3 "Fetched repeat is '$currepeat'"
        echo "Current repeat setting is $currepeat."
    else
        case "$1" in
            "off" | "one" | "all")
                echo "Switching repeat to $1."
                _tell_itunes "set song repeat of current playlist to $1"
                ;;
            *)
                _err "Repeat must be one of 'one', 'all' or 'off'."
                ;;
        esac
    fi
}

function _cmd_playlist() {
    echo TODO
}

function _cmd_playlists() {
    _fetch_from_itunes "playlists" playlist name time
    echo "Playlists"
    local playlist_idx=0
    while [ -n "${playlist_name[playlist_idx]}" ]; do
        echo "  ${playlist_name[playlist_idx]} (${playlist_time[playlist_idx]})"
        playlist_idx=$((playlist_idx + 1))
    done
}

#  Volume commands: volume, mute, unmute

function _cmd_volume() {
    curvol=$(_tell_itunes "sound volume as integer")
    _log 3 "Fetched volume is '$curvol'"
    if [ -z "$1" ]; then
        echo "Current iTunes volume is $curvol%"
    else
        newvol=-1
        case "$1" in
            "up")     newvol=$(($curvol + 10)) ;;
            "down")   newvol=$(($curvol - 10)) ;;
            "mute")   _cmd_mute                ;;
            "unmute") _cmd_unmute              ;;
            *)
                if [ "$1" -ge 0 -a "$1" -le 100 2>&- ] ; then
                    newvol=$1
                else
                    _err "Volume must be one of 'up', 'down', 'mute', 'unmute' or an integer between 0 and 100."
                fi
                ;;
        esac
        if [ $newvol != -1 ]; then
            echo "Changing iTunes volume level from $curvol to $newvol%"
            _tell_itunes "set sound volume to $newvol"
        fi
    fi
}

function _cmd_mute() {
    echo "Muting iTunes."
    _tell_itunes "set mute to true"
}

function _cmd_unmute() {
    echo "Unmuting iTunes."
    _tell_itunes "set mute to false"
}

#  Not strictly iTunes, but likely to be useful anyway.
function _cmd_sysvolume() {
    curvol=$(_osascript "output volume of (get volume settings)")
    _log 3 "Fetched volume is '$curvol'"
    if [ -z "$1" ]; then
        echo "Current system volume is $curvol%"
    else
        newvol=-1
        case "$1" in
            "up")     newvol=$(($curvol + 10)) ;;
            "down")   newvol=$(($curvol - 10)) ;;
            "mute")   _cmd_sysmute             ;;
            "unmute") _cmd_sysunmute           ;;
            *)
                if [ "$1" -ge 0 -a "$1" -le 100 2>&- ] ; then
                    newvol=$1
                else
                    _err "Volume must be one of 'up', 'down', 'mute', 'unmute' or an integer between 0 and 100."
                fi
                ;;
        esac
        if [ $newvol != -1 ]; then
            echo "Changing system volume level from $curvol to $newvol%"
            _osascript "set volume output volume $newvol"
        fi
    fi
}

function _cmd_sysmute() {
    echo "Muting system sound."
    _osascript "set volume output muted true"
}

function _cmd_sysunmute() {
    echo "Unmuting system sound."
    _osascript "set volume output muted false"
}

#  Application commands: open, quit

function _cmd_open() {
    echo "Opening iTunes."
    open -a iTunes
}

function _cmd_quit() {
    echo "Quitting iTunes."
    _tell_itunes "quit"
}

function _cmd_show() {
    echo "Showing iTunes window."
    _osascript "tell application \"System Events\" to set visible of process \"iTunes\" to true"
}

function _cmd_hide() {
    echo "Hiding iTunes window."
    _osascript "tell application \"System Events\" to set visible of process \"iTunes\" to false"
}

#  Argument processing and dispatch

debug=0
while getopts "hvd" "OPTNAME";
do
    case $OPTNAME in
        h) _cmd_help;    exit 0  ;;
        v) _cmd_version; exit 0  ;;
        d) debug=$(($debug + 1)) ;;
        *) exit -1               ;;
    esac
done
shift $(($OPTIND - 1))

cmd=$1
shift
case "$cmd" in
    #  Navigation commands.
    play|resume|unpause)
                 _cmd_play "$@"      ;;
    pause)       _cmd_pause "$@"     ;;
    stop)        _cmd_stop "$@"      ;;
    next)        _cmd_next "$@"      ;;
    prev)        _cmd_prev "$@"      ;;
    info)        _cmd_info "$@"      ;;
    shuffle)     _cmd_shuffle "$@"   ;;
    repeat)      _cmd_repeat "$@"    ;;
    playlist)    _cmd_playlist "$@"  ;;
    playlists)   _cmd_playlists "$@" ;;
    #  Volume commands.
    vol|volume)  _cmd_volume "$@"    ;;
    mute)        _cmd_mute "$@"      ;;
    unmute)      _cmd_unmute "$@"    ;;
    sysvol|sysvolume)
                 _cmd_sysvolume "$@" ;;
    sysmute)     _cmd_sysmute "$@"   ;;
    sysunmute)   _cmd_sysunmute "$@" ;;
    #  Application commands.
    open)        _cmd_open "$@"      ;;
    quit)        _cmd_quit "$@"      ;;
    show|reveal) _cmd_show "$@"      ;;
    hide)        _cmd_hide "$@"      ;;
    #  Extra commands.
    version)     _cmd_version "$@"   ;;
    ""|help)     _cmd_help "$@"      ;;
    *)           _cmd_unknown "$@"   ;;
esac
