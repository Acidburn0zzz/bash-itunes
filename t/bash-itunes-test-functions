#!/bin/bash

if [ "${BASH_SOURCE[0]}" = "$0" ]; then
    # Being run directly, probably by test harness running entire dir.
    echo "1..0 # SKIP bash-itunes-test-functions isn't a test file"
    exit 0
fi

mocked_command_delimiter="===================="
mocked_commands="/tmp/bash_tap_mock_osascript.$$"

function record_sent_command() {
    if [ ! -f "$mocked_commands" ]; then
        _bt_add_on_exit_cmd "rm -f '$mocked_commands'"
    fi
    echo "$*" >>$mocked_commands
    echo $mocked_command_delimiter >>$mocked_commands
}

function read_sent_commands() {
    i=0
    unset sent_commands
    while IFS='' read line; do
        if [ "$line" = "$mocked_command_delimiter" ]; then
            i=$((i + 1))
        else
            sent_commands[$i]="${sent_commands[$i]}$line\n"
        fi
    done < $mocked_commands
}

function clear_sent_commands() {
    rm -f '$mocked_commands'
}

# special cases: full dataset, single quotes and double quotes to mess things up
mock_track_1_name="Kathy's Song (Come Lie Next To Me)"
mock_track_1_artist="Apoptygma Berzerk"
mock_track_1_album="Welcome To Earth \"Extra bit for testing\""
mock_track_1_year="2000"
mock_track_1_rating="100"
mock_track_1_time="6:35"
mock_track_1_id="10611"
mock_track_1_data="$mock_track_1_name
$mock_track_1_artist
$mock_track_1_album
$mock_track_1_year
$mock_track_1_rating
$mock_track_1_time
$mock_track_1_id"

# special cases: no track rating
mock_track_2_name="Naked (God Module RMX)"
mock_track_2_artist="Assemblage 23"
mock_track_2_album="Addendum"
mock_track_2_year="2001"
mock_track_2_rating="0"
mock_track_2_time="5:22"
mock_track_2_id="15192"
mock_track_2_data="$mock_track_2_name
$mock_track_2_artist
$mock_track_2_album
$mock_track_2_year
$mock_track_2_rating
$mock_track_2_time
$mock_track_2_id"

# special cases: no track year
mock_track_3_name="Sapphire"
mock_track_3_artist="Ayria"
mock_track_3_album="Debris"
mock_track_3_year="0"
mock_track_3_rating="100"
mock_track_3_time="6:14"
mock_track_3_id="14151"
mock_track_3_data="$mock_track_3_name
$mock_track_3_artist
$mock_track_3_album
$mock_track_3_year
$mock_track_3_rating
$mock_track_3_time
$mock_track_3_id"

# special cases: no track year
mock_track_4_name="KathyÂ´s Song (Come Lie Next To Me)"
mock_track_4_artist="Apoptygma Berzerk"
mock_track_4_album="Apbl2000"
mock_track_4_year="2007"
mock_track_4_rating="0"
mock_track_4_time="6:57"
mock_track_4_id="15169"
mock_track_4_data="$mock_track_4_name
$mock_track_4_artist
$mock_track_4_album
$mock_track_4_year
$mock_track_4_rating
$mock_track_4_time
$mock_track_4_id"


tests_per_track_displayed=4

function test_track_displayed() {
    local output="$1"
    local track_variable_prefix="$2"
    local test_name="$3"

    # I kid you not.
    #   eval is to get the symbolic reference to the real variables.
    #   printf is to escape special characters for the "like" regexp matching.
    #     %q isn't quite the right escaping, but it seems to suffice in the
    #     absence of \Q...\E support in bash

    eval "local track_name=\$${track_variable_prefix}_name"
    printf -v track_name "%q" "$track_name"
    eval "local track_artist=\$${track_variable_prefix}_artist"
    printf -v track_artist "%q" "$track_artist"
    eval "local track_album=\$${track_variable_prefix}_album"
    printf -v track_album "%q" "$track_album"
    eval "local track_year=\$${track_variable_prefix}_year"
    printf -v track_year "%q" "$track_year"
    eval "local track_rating=\$${track_variable_prefix}_rating"
    printf -v track_rating "%q" "$track_rating"
    eval "local track_time=\$${track_variable_prefix}_time"
    printf -v track_time "%q" "$track_time"
    eval "local track_id=\$${track_variable_prefix}_id"
    printf -v track_id "%q" "$track_id"

    like "$output" "\"$track_name\"" "$test_name should contain track name '\"$track_name\"'"
    like "$output" "by $track_artist" "$test_name should contain track artist 'by $track_artist'"
    like "$output" "from \"$track_album\"" "$test_name should contain track album 'from \"$track_album\"'"
    like "$output" "\(([0-9]+:[0-9][0-9] of )?$track_time\)" "$test_name should contain track time '($track_time)' or '(m:ss of $track_time)'"
}
